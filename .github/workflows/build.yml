# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: CI/CD

on:
  push:
    branches: [ "main" ]
    tags-ignore: v=*
  #pull_request:
  #  branches: [ "main" ]
  release:
    types: [published]
    tags: v=*

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    
    - name: Action Run Info
      shell: pwsh
      run: |
        Write-Output "GitHub RUN ID:      [$($env:GITHUB_RUN_ID)]"
        Write-Output "GitHub JOB Name:    [$($env:GITHUB_JOB)]"
        Write-Output "GitHub RUN Number:  [$($env:GITHUB_RUN_NUMBER)]"
        
        Write-Output "GitHub Event Name:  [${{ github.event_name }}]"
        Write-Output "GitHub Event Name:  [$($env:GITHUB_EVENT_NAME)]"
        
        Write-Output "GitHub REF:         [$($env:GITHUB_REF)]"
        Write-Output "GitHub REF Type:    [$($env:GITHUB_REF_TYPE)]"
        Write-Output "GitHub REF Name:    [$($env:GITHUB_REF_NAME)]"
    
    - name: Checkout Latest
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    
    - name: Extract Version Base
      id: extract_version_base
      shell: pwsh
      run: |
          ## Need to run this once to get the dotnet init message out of the way
          dotnet msbuild ./Version.props /t:DumpVersions /nologo

          $vdumpJson = & dotnet msbuild ./Versions.props /t:DumpVersions /nologo
          Write-Output "Got Version Dump JSON:"
          Write-Output $vdumpJson

          $vdump = ConvertFrom-Json "$vdumpJson"
          Write-Output "Got Version Dump:"
          Write-Output $vdump

          ## Export as output and ENV VARS for subsequent steps
          $versionBase = "$($vdump.Major).$($vdump.Minor).$($vdump.Patch)"
          Write-Host "Setting Version Base:"
          Write-Host "version_base=$versionBase" >> "$($env:GITHUB_OUTPUT)"
          Write-Host "VERSION_BASE=$versionBase" >> "$($env:GITHUB_ENV)"

    - name: Compute Build Numbers
      uses: zyborg/gh-action-buildnum@v1
      with:
        gist_token: ${{ secrets.GIST_TOKEN }}
        version_key: ${{ steps.extract_version_base.outputs.version_base }}
        set_env: true

    - name: Dump Version Info
      shell: pwsh
      run: |
        Write-Host "Current Version Base:  $($env:VER_BASE)"
        Write-Host "Current Build Number:  $($env:BUILDNUM_FOR_VERSION)"
        
    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --no-build --verbosity normal

    - name: Pack
      run: dotnet pack --configuration Release /p:VersionBuild=$env:BUILDNUM_FOR_VERSION

    - name: Push Artifact
      if: startsWith(github.ref, 'refs/tags/v=')
      uses: actions/upload-artifact@v3.1.2
      with:
        name: nuget-pkg
        path: '**/*.nupkg'
  
